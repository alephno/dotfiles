#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* TODO config backlog [0/2]
- [ ] leader key setup for projectile
- [ ] leader key setup for magit

* Package Setup
** package archives
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src
** use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC
* UI
** basic tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(menu-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

(setq visible-bell nil
      ring-bell-function (lambda ()
                            (invert-face 'mode-line)
                            (run-with-timer 0.1 nil #'invert-face 'mode-line)))
#+END_SRC
** font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Go Mono" :height 140)
(set-face-attribute 'fixed-pitch nil :font "Go Mono" :height 140)
(set-face-attribute 'variable-pitch nil :font "Arial" :height 140 :weight 'regular)
#+END_SRC
** doom-modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** themes and icons
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-dracula t))

(use-package all-the-icons)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :bind
    (:map global-map
          ("C-c f" . treemacs-select-window))
    :config
    (setq treemacs-follow-after-init t
          treemacs-recenter-after-file-follow t
          treemacs-silent-refresh t	
          treemacs-silent-filewatch t
          treemacs-show-hidden-files t
          treemacs-sorting 'alphabetic-asc)
    (treemacs-fringe-indicator-mode)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t))

  (use-package treemacs-projectile
    :after treemacs projectile
    :bind (:map global-map ("C-c o t" . treemacs-projectile)))

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config 
    (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit)

  (use-package lsp-treemacs
    :after treemacs lsp-mode
    :config 
    (lsp-treemacs-sync-mode 1))

  (use-package treemacs-all-the-icons
    :after treemacs
    :config
    (treemacs-load-theme 'all-the-icons))
#+end_src
* Misc
** auto save directory
#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs-saves/"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

(setq auto-save-file-name-transforms
  `((".*" "~/.emacs-saves/" t)))
#+END_SRC
** helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+END_SRC
* Keybindings
** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC
** evil-collection
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC
** general.el
#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-create-definer alwi/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (alwi/leader-keys
    "t" '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "b" '(:ignore t :which-key "buffer")
    "bb" '(counsel-switch-buffer :which-key "switch buffer")
    "f" '(:ignore t :which-key "file")
    "ff" '(counsel-find-file :which-key "find file")))
#+END_SRC
** evil-magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :after magit)
#+END_SRC
* org
** org
#+BEGIN_SRC emacs-lisp
(defun alwi/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Arial" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(defun alwi/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . alwi/org-mode-setup)
  :config
  (setq org-agenda-start-with-log-mode t
        org-log-done 'time
        org-log-into-drawer t)
  (alwi/org-font-setup))
#+END_SRC
** visual-fill-column
#+BEGIN_SRC emacs-lisp
(defun alwi/org-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . alwi/org-visual-fill))
#+END_SRC
** org-tempo
#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src
** auto tangle
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))
    
(defun alwi/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/configuration.org"))
    (let ((org-confirm-babel-evaluate-nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'alwi/org-babel-tangle-config)))
#+END_SRC
* Developement
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+END_SRC
** ivy-rich
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :after counsel
  :init
  (ivy-rich-mode 1))
#+END_SRC
** all-the-icons-ivy-rich
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :after ivy
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
    ("C-c p" . projectile-command-map)
  :init
    (when (file-directory-p "~/github/alephno")
        (setq projectile-project-search-path '("~/github/alephno")))
    (setq projectile-switch-project-action #'projectile-dired))
  #+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         ("C-x C-f" . 'counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))
 
(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

(alwi/leader-keys
    "p" '(:ignore t :which-key "project")
    "pp" '(counsel-projectile-switch-project :which-key "switch project")
    "pf" '(counsel-projectile-find-file :which-key "find file")
    "pb" '(counsel-projectile-switch-to-buffer :which-key "switch to buffer")
    "ps" '(counsel-projectile-rg :which-key "search with rg"))

#+END_SRC
** company
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind 
  (:map company-active-map ("<tab>" . company-complete-section))
  (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0.1))
#+end_src
** lsp / languages
*** setup
#+BEGIN_SRC emacs-lisp
(defun alwi/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook (lsp-mode . alwi/lsp-mode-setup)
  :config
  (lsp-enable-which-key-integration t))
  
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
#+END_SRC
*** typescript / javascript
Install the typescript language server.

#+begin_src sh
npm install -g typescript-language-server
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

(add-hook 'js-mode-hook (lambda () 
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq-default tab-width 2)))

(use-package prettier-js
  :hook ((js-mode . prettier-js-mode)
         (typescript-mode . prettier-js-mode))
  :config
  (setq prettier-js-show-errors nil))
#+END_SRC
